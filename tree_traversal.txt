BST traversal order:-
==========================================================
			1
		2		3
	4		5		
Depth First Traversals:
(a) Inorder (Left, Root, Right) : 4 2 5 1 3
(b) Preorder (Root, Left, Right) : 1 2 4 5 3
(c) Postorder (Left, Right, Root) : 4 5 2 3 1

void pre_order_traversal(struct node* root) {
   if(root != NULL) {
      printf("%d ",root->data);
      pre_order_traversal(root->leftChild);
      pre_order_traversal(root->rightChild);
   }
}

void inorder_traversal(struct node* root) {
   if(root != NULL) {
      inorder_traversal(root->leftChild);
      printf("%d ",root->data);          
      inorder_traversal(root->rightChild);
   }
}

void post_order_traversal(struct node* root) {
   if(root != NULL) {
      post_order_traversal(root->leftChild);
      post_order_traversal(root->rightChild);
      printf("%d ", root->data);
   }
}
===================================================================

struct Node
{
	int key;
	struct Node *left,*right;
};

Node *newNode(int k)
{
	Node *temp = new Node;
	temp->key=k;
	temp->left=temp->right=NULL;
	return temp;
}

Node *search(Node *root,int keyvalue)
{
	if(root==NULL || root->key==keyvalue)
		return root;
	if(root->key < keyvalue)
		return search(root->right, keyvalue);
	return(root->left,key);
}

void inorder(Node *root)
{
	if(root!=NULL)
	{
		inorder(root->left);
		cout<<root-key;
		inorder(root->right);
	}
}

void preorder(Node *root)
{
	if(root!=NULL)
	{
		cout<<root-key;
		preorder(root->left);
		preorder(root->right);
	}
}

void postorder(Node *root)
{
	if(root!=NULL)
	{
		postorder(root->left);
		postorder(root->right);
		cout<<root-key;
	}
}

Node *insert(Node *node, int keyvalue)
{
	if(node==NULL)
		return newNode(keyvalue);
	if(keyvalue < node->key)
		node->left=insert(node->left,keyvalue);
	else if(keyvalue > node->key)
		node->right=insert(node->right,keyvalue);
	return node;
}

int main()
{
	Node *root= NULL;
	root=insert(root,50);
	insert(root,30);
	insert(root,20);
	insert(root,40);
	insert(root,70);
	insert(root,60);
	insert(root,80);
	
	inorder(root);
}